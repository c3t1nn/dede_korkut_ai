import google.generativeai as genai
import time
import logging
import re
from functools import lru_cache
from tenacity import retry, stop_after_attempt, wait_exponential
from flask import session
from ..config import Config
from .text_processor import TextProcessor

logger = logging.getLogger(__name__)

class RateLimiter:
    def __init__(self):
        self.requests = []
        self.window = 60
        
    def can_make_request(self):
        now = time.time()
        self.requests = [req for req in self.requests if now - req < self.window]
        return len(self.requests) < Config.API_RATE_LIMIT
        
    def add_request(self):
        self.requests.append(time.time())

class StoryGenerator:
    def __init__(self):
        self.rate_limiter = RateLimiter()
        self.text_processor = TextProcessor()
        genai.configure(api_key=Config.GOOGLE_API_KEY)

    def _build_initial_prompt(self, character_name):
        """ƒ∞lk b√∂l√ºm i√ßin prompt olu≈ütur"""
        return f"""
        Hey hey, hanƒ±m hey! {character_name} hakkƒ±nda bir destan anlatayƒ±m:
        
        Kurallar:
        1. Dede Korkut √ºslubuyla anlat
        2. "Hey hey!", "Mere!", "Hanum hey!" gibi √ºnlemler kullan
        3. Oƒüuz T√ºrk√ßesi deyi≈üler ve benzetmeler ekle
        4. Kahramanƒ±n i√ß d√ºnyasƒ±nƒ± yansƒ±t
        5. Hikayeyi bir karar anƒ±na getir
        
        Hikayenin sonunda tam olarak bu formatta √º√ß se√ßenek sun:
        SE√áENEKLER:
        ‚Ä¢ [Eylem]: [Detaylƒ± a√ßƒ±klama]
        ‚Ä¢ [Eylem]: [Detaylƒ± a√ßƒ±klama]
        ‚Ä¢ [Eylem]: [Detaylƒ± a√ßƒ±klama]
        """

    def _build_continuation_prompt(self, character_name, previous_text, choice):
        """Devam b√∂l√ºm√º i√ßin prompt olu≈ütur"""
        return f"""
        [√ñnceki B√∂l√ºm √ñzeti: {previous_text[-300:]}]
        [Kahramanƒ±n Se√ßimi: {choice}]
        
        {character_name}'in destanƒ± se√ßimine g√∂re devam ediyor.
        
        Kurallar:
        1. ƒ∞lk paragrafta se√ßimin sonu√ßlarƒ±nƒ± g√∂ster
        2. Yeni zorluklar ortaya √ßƒ±kar
        3. Kahramanƒ±n deƒüi≈üimini yansƒ±t
        4. Hikayeyi yeni bir karar anƒ±na getir
        
        Hikayenin sonunda tam olarak bu formatta √º√ß se√ßenek sun:
        SE√áENEKLER:
        ‚Ä¢ [Eylem]: [Detaylƒ± a√ßƒ±klama]
        ‚Ä¢ [Eylem]: [Detaylƒ± a√ßƒ±klama]
        ‚Ä¢ [Eylem]: [Detaylƒ± a√ßƒ±klama]
        """

    def _build_final_prompt(self, character_name, all_choices, previous_text):
        """Son b√∂l√ºm i√ßin √∂zel prompt"""
        return f"""
        [T√ºm Se√ßimler: {', '.join(all_choices)}]
        [Son Durum: {previous_text[-300:]}]
        
        {character_name}'in destanƒ±nƒ±n son b√∂l√ºm√º.
        
        Kurallar:
        1. √ñnceki se√ßimlerin sonu√ßlarƒ±nƒ± √∂zetle
        2. Kahramanƒ±n ya≈üadƒ±ƒüƒ± deƒüi≈üimi anlat
        3. Destandan √ßƒ±karƒ±lacak dersi g√∂ster
        4. Hikayeyi ≈üu ≈üekilde bitir:
        
        "Dedem Korkut geldi, kopuz √ßaldƒ±, boy boyladƒ±. Dedi ki: [Destanƒ±n √∂ƒü√ºd√º]"
        """

    def generate_story_content(self, prompt):
        """API √ßaƒürƒ±sƒ± yaparak hikaye √ºret"""
        try:
            if not self.rate_limiter.can_make_request():
                time.sleep(4)
            
            self.rate_limiter.add_request()
            
            model = genai.GenerativeModel('gemini-pro',
                generation_config={
                    'temperature': 0.9,
                    'top_p': 0.9,
                    'top_k': 40,
                    'max_output_tokens': Config.MAX_OUTPUT_TOKENS,
                }
            )
            
            response = model.generate_content(prompt)
            
            if not response or not response.text:
                raise Exception("Bo≈ü yanƒ±t alƒ±ndƒ±")
                
            return response.text
            
        except Exception as e:
            logger.error(f"Hikaye √ºretme hatasƒ±: {e}")
            return "Dedem Korkut der ki: Bir hata olu≈ütu, hikayeyi anlatamadƒ±m..."

    def _extract_story_and_choices(self, text):
        """Hikaye metnini ve se√ßenekleri standart formatta ayƒ±r"""
        try:
            parts = text.split('SE√áENEKLER:')
            story = parts[0].strip()
            
            choices = {}
            if len(parts) > 1:
                options = re.findall(r'‚Ä¢\s*([^‚Ä¢\n]+)', parts[1])
                for i, option in enumerate(options[:3], 1):
                    # Ba≈ülƒ±k ve a√ßƒ±klamayƒ± ayƒ±r
                    if ':' in option:
                        title, description = [part.strip() for part in option.split(':', 1)]
                    else:
                        # Eƒüer : ile ayrƒ±lmamƒ±≈üsa, ilk kelimeyi ba≈ülƒ±k yap
                        words = option.strip().split()
                        title = words[0]
                        description = ' '.join(words[1:]) if len(words) > 1 else ''

                    # Ba≈ülƒ±ktaki gereksiz parantezli kƒ±smƒ± temizle
                    title = re.sub(r'\s*\([^)]*\)\s*$', '', title)
                    
                    # Emoji se√ß
                    emoji = self.text_processor.get_choice_emoji(title)
                    
                    choices[str(i)] = {
                        "text": {
                            "title": f"{title}:",
                            "description": description
                        },
                        "emoji": emoji
                    }
            
            return story, choices
            
        except Exception as e:
            logger.error(f"Se√ßenek ayrƒ±≈ütƒ±rma hatasƒ±: {e}")
            return text, {}

    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
    def generate_story_part(self, character_name, stage="introduction", choice=None):
        """Hikayenin bir b√∂l√ºm√ºn√º olu≈ütur"""
        try:
            # Prompt olu≈ütur
            if stage == "introduction":
                prompt = self._build_initial_prompt(character_name)
            elif stage == "conclusion":
                all_choices = session.get('choices_made', [])
                previous_text = session.get('story_parts', [{}])[-1].get('text', '')
                prompt = self._build_final_prompt(character_name, all_choices, previous_text)
            else:
                previous_text = session.get('story_parts', [{}])[-1].get('text', '')
                prompt = self._build_continuation_prompt(character_name, previous_text, choice)
            
            # Hikayeyi √ºret
            story_text = self.generate_story_content(prompt)
            
            # Son b√∂l√ºm deƒüilse hikaye ve se√ßenekleri ayƒ±r
            if stage != "conclusion":
                story_text, choices = self._extract_story_and_choices(story_text)
            else:
                story_text = self.text_processor.clean_text(story_text)
                choices = {}
            
            return {
                'text': story_text,
                'choices': choices,
                'stage': stage
            }
            
        except Exception as e:
            logger.error(f"Hikaye b√∂l√ºm√º olu≈üturma hatasƒ±: {e}")
            return {
                'text': "Dedem Korkut der ki: Hikayeyi devam ettiremedim...",
                'choices': {
                    "1": {
                        "text": {
                            "title": "Yeniden dene:",
                            "description": "Hikayeyi ba≈ütan ba≈ülat"
                        },
                        "emoji": "üîÑ"
                    }
                },
                'stage': stage
            }

    def continue_story(self, character, current_stage, choice):
        """Hikayeyi se√ßime g√∂re devam ettir"""
        next_stage = "conclusion" if current_stage == "development" else "development"
        return self.generate_story_part(character, next_stage, choice)